{
"AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template is to provision a 3 tier infrastructure in AWS",
    "Metadata": {

    },
    "Parameters": {
      
      "Environment": {
          "Description": "Application environment",
          "Type": "String",
          "Default": "development",
          "AllowedValues": ["development", "testing", "acceptance", "production"]
      },
      
      
      "AMIID": {
          "Description": "This is the AMI for the linux machine",
          "Type": "String",
          "Default": "ami-0022f774911c1d690"
      },
      
      "instancetype": {
          "Description": "This is the instancetype",
          "Type": "AWS::SSM::Parameter::Value<String>",
          "Default": "/jjtech/ec2/instancetype"
          
      },
      
      "Volume": {
          "Description": "This is the volume parameter",
          "Type": "Number",
          "Default": "8",
          "MinValue": "8",
          "MaxValue": "100",
          "ConstraintDescription": "must be a number between 8 to 100 Gb"
      },
      
      "KeyName": {
          "Description": "Name of an existing EC2 KeyPair to enable SSH access",
          "Type": "AWS::EC2::KeyPair::KeyName",
          "ConstraintDescription": "must be the name of an existing EC2 key"
      },

      
      "SecurityGroupPorts": {
          "Description": "This is the instance SG",
          "Type": "Number",
          "AllowedValues": 
            ["80",
            "443",
            "22"]
      },
      
      "SSHLocation": {
          "Description": "This is the SSH IPs that can be used to SSH into Instance",
          "Type": "String",
          "Default": "0.0.0.0/0"
      }
    
    },
    "Mappings": {
      
      "EC2TypeBasedOnEnv": {
                "development": {
                  "keyname": "dev-key"
                },
                "test": {
                  "keyname": "test-key"
                },
                "acceptance": {
                  "keyname": "acc-key"
                },
                "production": {
                  "keyname": "prod-key"
                }
      }
      

    },
    "Conditions": {

    },
    "Resources": {
        
        "mwvpc": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "CidrBlock": "10.0.0.0/16",
            "Tags":[
            { "Key": "Name", "Value":  "mwvpc" }
            ] 
          }
        },
        
        "publicsub": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "AvailabilityZone": "us-east-1a",
            "VpcId": 
            { "Ref": "mwvpc" }
             ,
            "CidrBlock": "10.0.1.0/24",
            "Tags":[
            { "Key": "Name", "Value":  "publicsub" }
            ]
          }
        },
        
        "privatesub": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "AvailabilityZone": "us-east-1a",
            "VpcId": 
            { "Ref": "mwvpc" }
            ,
            "CidrBlock": "10.0.2.0/24", 
            "Tags":[
            { "Key": "Name", "Value":  "privatesub" }
            ]
          }
        },
        
        "privatesub2": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "AvailabilityZone": "us-east-1a",
            "VpcId": 
            { "Ref": "mwvpc" }
            ,
            "CidrBlock": "10.0.3.0/24",
            "Tags":[
            { "Key": "Name", "Value":  "privatesub2" }
            ]
          }
        },
        
        
        "igwvpc": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": { 
            "Tags":[
            { "Key": "Name", "Value":  "igwvpc1" }
            ]
          }
        },
        "AttachGateway": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": 
            
            { "Ref": "mwvpc" }
             ,
            "InternetGatewayId": { "Ref": "igwvpc" }
          }
        },
        
        "mwrt": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": 
            { "Ref": "mwvpc" }
             ,
            "Tags":[
            { "Key": "Name", "Value":  "mwrt" }
            ]
          }
        },
        
        "route": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": 
            { "Ref": "mwrt" }
            ,
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": 
            { "Ref": "igwvpc" }
            
          }
        },
        
        "publicrtassoc": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": 
            { "Ref": "publicsub" }
             ,
            "RouteTableId": 
            { "Ref": "mwrt" }
            
          }
        },
        
        "pvtrt": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": 
            { "Ref": "mwvpc" }
             ,
            "Tags":[
            { "Key": "Name", "Value":  "pvtrt" }
            ]
          }
        },
        
        "privatesubnetAssoc": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": 
            { "Ref": "privatesub" }
             ,
            "RouteTableId": 
            { "Ref": "pvtrt" }
            
          }
        },
        
        "privatesub2assoc": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": 
            { "Ref": "privatesub2" }
             ,
            "RouteTableId": 
            { "Ref": "pvtrt" }
            
          }
        },
        
        "NATvpc" : {
          "Type" : "AWS::EC2::NatGateway",
          "Properties" : {
             "AllocationId" : { "Fn::GetAtt" : ["EIP", "AllocationId"]},
             "SubnetId" : { "Ref" : "publicsub"},
             "Tags" : [ {"Key" : "Name", "Value" : "NATvpc" } ]
            }
       },
       "EIP" : {
          "DependsOn" : "igwvpc"
           ,
          "Type" : "AWS::EC2::EIP",
          "Properties" : {
             "Domain" : 
             { "Ref": "mwvpc" }
             
          }
       }, 
       "Route" : {
        "Type" : "AWS::EC2::Route",
        "Properties" : {
           "RouteTableId" : { "Ref" : "pvtrt" },
           "DestinationCidrBlock" : "0.0.0.0/0",
           "NatGatewayId" : { "Ref" : "NATvpc" }
        }
     },
     
     "instancesg" : {
       "Type" : "AWS::EC2::SecurityGroup",
       "Properties" : {
         "GroupDescription" : "This is for the security group",
         "SecurityGroupIngress" : [{
           "IpProtocol" : "tcp",
           "FromPort" : 
           { "Ref": "SecurityGroupPorts" }
           ,
           "ToPort" : 
           { "Ref": "SecurityGroupPorts" }
           ,
           "CidrIp" : 
           { "Ref": "SSHLocation" }
           
         }],
         "SecurityGroupEgress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 
            { "Ref": "SecurityGroupPorts" }
            ,
            "ToPort" : 
            { "Ref": "SecurityGroupPorts" }
            ,
            "CidrIp" : 
            { "Ref": "SSHLocation" }
            
         }],
         "VpcId" : 
         { "Ref": "mwvpc" }
         ,
         "Tags":[
         { "Key": "Name", "Value":  "instancesg" }
         ]
       }
     },
     "bastion": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
          "KeyName": 
          "Fn::FindInMap": [
            "EC2TypeBasedOnEnv",
              
              {"Ref": "Environment" } }
              ,
              "keyname"
          ]
            
        },
          
          "DisableApiTermination": "true",
          "ImageId": 
          { "Ref": "AMIID" },
          "SubnetId" : 
          { "Ref": "publicsub" },
          "InstanceType": 
          { "Ref": "instancetype" }
          ,
          "Monitoring": "true",
          "SecurityGroupIds" : 
          [{ "Ref": "instancesg" }]
          ,
          "Tags": [
              {
                  "Key": "Name",
                  "Value": "bastionhost"
              }
          ]
         
  }
         
      },
      
      "Webserver": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
            "KeyName": "Endpoint",
            "DisableApiTermination": "true",
            "ImageId": 
            { "Ref": "AMIID" }
             ,
             "SubnetId" : 
             { "Ref": "privatesub" },
             
            "InstanceType": 
            { "Ref": "instancetype" }
             ,
            "Monitoring": "true",
            "SecurityGroupIds" : [
            { "Ref": "instancesg" }
            ],
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "Webserver"
                  }
              ]
              
      }
              },
      
      "AppServer": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
            "KeyName": "Endpoint",
            "DisableApiTermination": "true",
            "ImageId": 
            { "Ref": "AMIID" }
             ,
             "SubnetId" : 
             { "Ref": "privatesub" },
             
            "InstanceType": 
            { "Ref": "instancetype" }
             ,
            "Monitoring": "true",
            "SecurityGroupIds" : [
            { "Ref": "instancesg" }
            ],
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "AppServer"
                }
              ]
             
      }
              },
      
      "myloadbalancer": {
         "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
         "Properties": {
            "AvailabilityZones" : [ "us-east-1a" ],
            "Listeners" : [{
              "InstancePort": "80",
              "InstanceProtocol" : "HTTP",
              "LoadBalancerPort" : "80",
              "Protocol" : "HTTP"
            }],
            "HealthCheck" : {
              "Target" : "HTTP:80/",
              "HealthyThreshold": "2",
              "UnhealthyThreshold": "3",
              "Interval": "10",
              "Timeout": "5"
            },
            "Tags": [
                  {
                    "Key": "Name",
                    "Value": "myloadbalancer"
                  }
            ]
         }
      }
      
        
      

    },
    "Outputs": {

    }
}